"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6278],{263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=t(2540),o=t(3023);const a={},s="Run with Podman",r={id:"installation/thirdparty/podman",title:"Run with Podman",description:"This method is not officially supported.",source:"@site/docs/installation/thirdparty/podman.md",sourceDirName:"installation/thirdparty",slug:"/installation/thirdparty/podman",permalink:"/docs/installation/thirdparty/podman",draft:!1,unlisted:!1,editUrl:"https://github.com/gotson/komga-website/tree/master/docs/installation/thirdparty/podman.md",tags:[],version:"current",lastUpdatedAt:1730280364e3,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Third-party methods",permalink:"/docs/category/third-party-methods"},next:{title:"Run with PikaPods",permalink:"/docs/installation/thirdparty/pikapods"}},d={},l=[{value:"Usage",id:"usage",level:2},{value:"podman",id:"podman",level:3},{value:"podman quadlet file",id:"podman-quadlet-file",level:3},{value:"podman quadlet files for using komf",id:"podman-quadlet-files-for-using-komf",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Support info",id:"support-info",level:2},{value:"Updating",id:"updating",level:2},{value:"Via podman auto-update",id:"via-podman-auto-update",level:3},{value:"Automatic updates",id:"automatic-updates",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"run-with-podman",children:"Run with Podman"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"This method is not officially supported."})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"Here are some example snippets to help you get started creating a container."}),"\n",(0,i.jsxs)(n.p,{children:["Refer to ",(0,i.jsx)(n.a,{href:"/docs/installation/docker#registries",children:"Run with Docker"})," for information about images and version tags."]}),"\n",(0,i.jsx)(n.h3,{id:"podman",children:"podman"}),"\n",(0,i.jsx)(n.p,{children:"Create the container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"podman create \\\n  --name=komga \\\n  -p 25600:25600 \\\n  --mount type=bind,source=/path/to/config,target=/config \\\n  --mount type=bind,source=/path/to/data,target=/data \\\n  docker.io/gotson/komga:latest\n"})}),"\n",(0,i.jsx)(n.p,{children:"Start the container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"podman start komga\n"})}),"\n",(0,i.jsx)(n.h3,{id:"podman-quadlet-file",children:"podman quadlet file"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"These quadlet files were tested with podman version 4.5.3"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create the following quadlet file ",(0,i.jsx)(n.code,{children:"~/.config/containers/systemd/komga.container"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Unit]\nDescription=Media server for comics/mangas/BDs/magazines/eBooks with API, OPDS and Kobo Sync support\n\n[Container]\n## General\nAutoUpdate=registry\nImage=docker.io/gotson/komga:latest\n\n## Network\nPublishPort=25600:25600\n\n## Volumes\n# %h is for user home directory.\n# see https://man.archlinux.org/man/systemd.unit.5.en#SPECIFIERS for more info about this.\nVolume=%h/path/to/config:/config\nVolume=%h/path/to/data:/data\n\n## Environment Variables\nEnvironment=<ENV_VAR>=<extra configuration>\n\n[Service]\n# Add 143 exit code to prevent the systemd service entering a failed state when stopping it\nSuccessExitStatus=0 143\n# Extend Timeout to allow time to pull the image\nTimeoutStartSec=900\n\n[Install]\n# Start komga on boot\nWantedBy=multi-user.target default.target\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"systemctl --user daemon-reload"})," to generate the systemd service from the quadlet file."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"systemctl --user start komga.service"})," to start the container."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Make sure to create the folders under the Volumes section of the quadlet file before starting the container."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"podman-quadlet-files-for-using-komf",children:"podman quadlet files for using komf"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"These quadlet files were tested with podman version 4.5.3"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create the following quadlet files in ",(0,i.jsx)(n.code,{children:"~/.config/containers/systemd/komga"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"komga.pod"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Pod]\n# Komga\nPublishPort=25600:25600\n# Komf\nPublishPort=8085:8085\n\n[Install]\n# Start the pod on boot\nWantedBy=multi-user.target default.target\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"komga.container"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Unit]\nDescription=Media server for comics/mangas/BDs/magazines/eBooks with API, OPDS and Kobo Sync support\n\n[Container]\n## General\nAutoUpdate=registry\nImage=docker.io/gotson/komga:latest\nPod=komga.pod\n\n## Volumes\n# %h is for user home directory.\n# see https://man.archlinux.org/man/systemd.unit.5.en#SPECIFIERS for more info about this.\nVolume=%h/path/to/config:/config\nVolume=%h/path/to/data:/data\n\n## Environment Variables\nEnvironment=<ENV_VAR>=<extra configuration>\n\n[Service]\n# Add 143 exit code to prevent the systemd service entering a failed state when stopping it\nSuccessExitStatus=0 143\n# Extend Timeout to allow time to pull the image\nTimeoutStartSec=900\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"komf.container"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a podman secret called ",(0,i.jsx)(n.code,{children:"komga_password"})," for the komga admin password. Check ",(0,i.jsx)(n.a,{href:"https://docs.podman.io/en/latest/markdown/podman-secret-create.1.html",children:"the official Podman documentation"})," for more details on how to create a podman secret."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[Unit]\nDescription=Komga and Kavita metadata fetcher\nAfter=komga.service\n\n[Container]\n## General\nAutoUpdate=registry\nImage=docker.io/sndxr/komf:latest\nPod=komga.pod\n\n## Volumes\n# %h is for user home directory.\n# see https://man.archlinux.org/man/systemd.unit.5.en#SPECIFIERS for more info about this.\nVolume=%h/path/to/config:/config\n\n## Environment Variables\nEnvironment="KOMF_KOMGA_BASE_URI=http://localhost:25600"\nEnvironment="KOMF_KOMGA_USER=admin@example.com"\nEnvironment="JAVA_TOOL_OPTIONS=-XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact -XX:ShenandoahGuaranteedGCInterval=3600000 -XX:TrimNativeHeapInterval=3600000"\nSecret=komga_password,type=env,target=KOMF_KOMGA_PASSWORD\n\n[Service]\n# Add 143 exit code to prevent the systemd service entering a failed state when stopping it\nSuccessExitStatus=0 143\n# Extend Timeout to allow time to pull the image\nTimeoutStartSec=900\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"systemctl --user daemon-reload"})," to generate the systemd services from the quadlet files."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"systemctl --user start komga-pod.service"})," to start the pod."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Make sure to create the folders under the Volumes section of the quadlet files before starting the pod."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to ",(0,i.jsx)(n.a,{href:"/docs/installation/docker#parameters",children:"Run with Docker"})," for information about parameters and memory limit."]}),"\n",(0,i.jsx)(n.h2,{id:"support-info",children:"Support info"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Shell access whilst the container is running: ",(0,i.jsx)(n.code,{children:"podman exec -it komga /bin/bash"})]}),"\n",(0,i.jsxs)(n.li,{children:["To monitor the logs of the container in realtime: ",(0,i.jsx)(n.code,{children:"podman logs -f komga"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"updating",children:"Updating"}),"\n",(0,i.jsx)(n.p,{children:"Below are the instructions for updating containers:"}),"\n",(0,i.jsx)(n.h3,{id:"via-podman-auto-update",children:"Via podman auto-update"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add ",(0,i.jsx)(n.code,{children:"AutoUpdate=registry"})," under the ",(0,i.jsx)(n.code,{children:"[Container]"})," section of the quadlet file."]}),"\n",(0,i.jsxs)(n.li,{children:["Use any tag for the image that isn't version specific like the ",(0,i.jsx)(n.code,{children:"latest"})," tag."]}),"\n",(0,i.jsxs)(n.li,{children:["Check if a new image is available: ",(0,i.jsx)(n.code,{children:"podman auto-update --dry-run"})]}),"\n",(0,i.jsxs)(n.li,{children:["Update containers: ",(0,i.jsx)(n.code,{children:"podman auto-update"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"automatic-updates",children:"Automatic updates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Follow the instructions on the previous section to configure ",(0,i.jsx)(n.code,{children:"podman auto-update"})]}),"\n",(0,i.jsxs)(n.li,{children:["Enable the systemd timer: ",(0,i.jsx)(n.code,{children:"systemctl --user enable podman-auto-update.timer"})]}),"\n",(0,i.jsxs)(n.li,{children:["By default the timer will update the containers daily at midnight. You can customize the timer by running ",(0,i.jsx)(n.code,{children:"systemctl --user edit podman-auto-update.timer"})]}),"\n",(0,i.jsxs)(n.li,{children:["Check ",(0,i.jsx)(n.a,{href:"https://man.archlinux.org/man/core/systemd/systemd.timer.5.en",children:"this page"})," for more info about systemd timers."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example systemd timer override for weekly updates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Timer]\nOnCalendar=weekly\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(3696);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);